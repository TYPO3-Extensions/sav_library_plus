<?php/****************************************************************  Copyright notice**  (c) 2011 Laurent Foulloy <yolf.typo3@orange.fr>*  All rights reserved**  This script is part of the TYPO3 project. The TYPO3 project is*  free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  The GNU General Public License can be found at*  http://www.gnu.org/copyleft/gpl.html.**  This script is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  This copyright notice MUST APPEAR in all copies of the script!***************************************************************//** * Form configuration manager * * @package SavLibraryPlus * @version $ID:$ */class Tx_SavLibraryPlus_Managers_FormConfigurationManager extends Tx_SavLibraryPlus_Managers_AbstractManager {  /**   * The form configuration   *   * @var array   */  protected $formConfiguration;  /**   * Injects the form configuration   *   * @param array $formConfiguration   *   * @return none   */  public function injectFormConfiguration($formConfiguration) {    $this->formConfiguration = $formConfiguration;  }  /**   * Gets form configuration item   *   * @param $itemKey string   *   * @return mixed   */  protected function getFormConfigurationItem($itemKey) {    return $this->formConfiguration[$itemKey];  }  /**   * Gets the form title.   *   * @param none   *   * @return string   */  public function getFormTitle() {    return $this->getFormConfigurationItem('title');  }  /**   * Gets the list view identifier.   *   * @param none   *   * @return integer   */  public function getListViewIdentifier() {    return $this->getFormConfigurationItem('listView');  }  /**   * Gets the single view identifier.   *   * @param none   *   * @return integer   */  public function getSingleViewIdentifier() {    return $this->getFormConfigurationItem('singleView');  }  /**   * Gets the edit view identifier.   *   * @param none   *   * @return integer   */  public function getEditViewIdentifier() {    return $this->getFormConfigurationItem('editView');  }  /**   * Gets the query identifier.   *   * @param none   *   * @return integer   */  public function getQueryIdentifier() {    return $this->getFormConfigurationItem('query');  }  /**   * Gets the update view identifier.   *   * @param none   *   * @return integer   */  public function getFormViewIdentifier() {    return $this->getFormConfigurationItem('formView');  }  /**   * Gets the special view identifier.   *   * @param none   *   * @return integer   */  public function getSpecialViewIdentifier() {    return $this->getFormConfigurationItem('specialView');  }  /**   * Gets the views with condition for a given view type.   *   * @param string $viewType   *   * @return array or null   */  public function getViewsWithCondition($viewType) {  	$viewsWithCondition = $this->getFormConfigurationItem('viewsWithCondition');  	if (is_array($viewsWithCondition[t3lib_div::lcfirst($viewType)])) {  		return $viewsWithCondition[t3lib_div::lcfirst($viewType)];  	} else {  		return NULL;  	}  }   /**   * Gets the user plugin flag.   *   * @param none   *   * @return boolean   */  public function getUserPluginFlag() {    return $this->getFormConfigurationItem('userPlugin');  }  }?>