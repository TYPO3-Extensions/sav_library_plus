<?php/****************************************************************  Copyright notice**  (c) 2011 Laurent Foulloy <yolf.typo3@orange.fr>*  All rights reserved**  This script is part of the TYPO3 project. The TYPO3 project is*  free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  The GNU General Public License can be found at*  http://www.gnu.org/copyleft/gpl.html.**  This script is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  This copyright notice MUST APPEAR in all copies of the script!***************************************************************//** * User manager. * * @package SavLibraryPlus * @version $ID:$ */class Tx_SavLibraryPlus_Managers_UserManager extends Tx_SavLibraryPlus_Managers_AbstractManager {  // Constants used in admin methods  const NOBODY = 0;  const ALL = 1;  const ADMIN_PLUS_USER = 2;  const ALL_EXCLUDING_SUPER_ADMIN = 3;    /**   * Checks if the a user is authenticated in FE.   *   * @param none   *   * @return boolean   */  public function userIsAuthenticated() { 	  return (is_null($GLOBALS['TSFE']->fe_user->user['uid']) ? false : true);  }	/**	 * Checks if the user is allowed to input data in the form	 *	 * @param none	 *	 * @return boolean	*/  public function userIsAllowedToInputData() {    // Checks if the user is authenticated    if ($this->userIsAuthenticated() === false)      return false;          // Gets the extension configuration manager    $extensionConfigurationManager = $this->getController()->getExtensionConfigurationManager();    // Condition on date	  $time = time();    $conditionOnInputDate = (      $extensionConfigurationManager->getInputStartDate() &&      ($time >= $extensionConfigurationManager->getInputStartDate()) &&      $extensionConfigurationManager->getInputEndDate() &&      ($time <= $extensionConfigurationManager->getInputEndDate())    );  	switch ($extensionConfigurationManager->getDateUserRestriction()) {  	  case self::NOBODY:        $conditionOnInputDate = true;      case self::ALL:        // The condition is applied to all users including super Admin        break;      case self::ADMIN_PLUS_USER:        // The condition will be checked in userIsAdmin and applied to admin Plus users        $conditionOnInputDate = true;        break;      case self::ALL_EXCLUDING_SUPER_ADMIN:        // Checks if the user is super Admin.        $conditionOnInputDate = ($this->userIsSuperAdmin() ? true : $conditionOnInputDate);        break;    }    // Condition on allowedGroups    $result = (      count(        array_intersect(          explode(',', $extensionConfigurationManager->getAllowedGroups()),          array_keys($GLOBALS['TSFE']->fe_user->groupData['uid'])        )      ) > 0 ?      true :      false    );    $conditionOnAllowedGroups = ($extensionConfigurationManager->getAllowedGroups() ? $result : true);           return $extensionConfigurationManager->getInputIsAllowed() && $conditionOnAllowedGroups && $conditionOnInputDate;  }	/**	 * Checks if the user is allowed to change data in the form	 *	 * @param string $additionalString (default '') String which will be added to the field value	 *	 * @return boolean	*/  public function userIsAllowedToChangeData($additionalString = '') {  	  	if ($this->userIsSuperAdmin()) {  		return true;  	}  	    // Gets the extension configuration manager    $extensionConfigurationManager = $this->getController()->getExtensionConfigurationManager();  	$inputAdminConfiguration = $GLOBALS['TSFE']->fe_user->getUserTSconf();  	  	    // Condition on the Input Admin Field    $conditionOnInputAdminField = true;    $inputAdminField = $extensionConfigurationManager->getInputAdminField();     if (!empty($inputAdminField)) {			$fieldValue = $this->getQuerier()->getFieldValueFromCurrentRow($this->getQuerier()->buildFullFieldName($inputAdminField));			$fieldValue = html_entity_decode($fieldValue . $additionalString, ENT_QUOTES);			switch ($inputAdminField) {				case 'cruser_id':					// Checks if the user created the record					if ($fieldValue != $GLOBALS['TSFE']->fe_user->user['uid']) {						$conditionOnInputAdminField = false;					}					break;				default:					$conditionOnInputAdminField = (						strpos($inputAdminConfiguration[Tx_SavLibraryPlus_Managers_ExtensionConfigurationManager::getExtensionKey() . '_Admin'], $fieldValue) === false ?						false :						true					);					break;			}    }    return $conditionOnInputAdminField;  }      	/**	 * Checks if the user is a super admin for the extension	 *	 * @param none	 *	 * @return boolean	*/  public function userIsSuperAdmin() {  	  	// Gets the extension key  	$extensionKey = $this->getController()->getExtensionConfigurationManager()->getExtensionKey();  	// Gets the user TypoScript configuration  	$userTypoScriptConfiguration = $GLOBALS['TSFE']->fe_user->getUserTSconf();  	// Sets the condition  	$condition = ($userTypoScriptConfiguration[$extensionKey . '_Admin'] == '*');      return $condition;  }	/**	 * Checks if the user is allowed to export data	 *	 * @param none	 *	 * @return boolean	*/  public function userIsAllowedToExportData() {  	// Gets the extension key  	$extensionKey = $this->getController()->getExtensionConfigurationManager()->getExtensionKey();  	 // Gets the user TypoScript configuration  	$userTypoScriptConfiguration = $GLOBALS['TSFE']->fe_user->getUserTSconf();    // Sets the condition     $condition = ($userTypoScriptConfiguration[$extensionKey . '_Export'] == '*');    return $condition;  }// TODO tout est Ã  verifier en dessous 	/***************************************************************/	/* Admin methods                                               */	/***************************************************************/	/**	 * Checks if the user is a plugin Administrator for the field	 *	 * @param $data (data in which the InputAdminField value is searched)	 * @param $plus (if not null, check if the user is an Administrator + for the field)	 *	 * @return boolean ()	 */	public function userIsAdmin(&$data, $plus=0) {    // Gets the extension configuration manager    $extensionConfigurationManager = $this->getController()->getExtensionConfigurationManager();    if (!$extensionConfigurationManager->getInputAdminField()) {      return true;  // if no Admin field, returns true    } else {      // Gets the value associated with inputAdminField in the data      // TODO pas bon      $dataValue = $this->getValue(        $this->tableLocal,        $extensionConfigurationManager->getInputAdminField(),        $data      );      $fieldValue = html_entity_decode(        $dataValue . ($plus ? '+' : ''),        ENT_QUOTES      );      // An Admin field was set. Checks if the user TS config contains      // either the field value or * (super admin)  		$inputAdminConf = $GLOBALS['TSFE']->fe_user->getUserTSconf();      // Checks if the fied value is set      if (!$fieldValue) {        return false;      }      // Condition on date	    $time = time();      $conditionInputDate = (        $extensionConfigurationManager->getInputStartDate() &&        ($time >= $extensionConfigurationManager->getInputStartDate()) &&        $extensionConfigurationManager->getInputEndDate() &&        ($time <= $extensionConfigurationManager->getInputEndDate())      );      // Checks if the the user is an admin for the field      $conditionFieldAdmin = true;      switch ($extensionConfigurationManager->getInputAdminField()) {        case 'cruser_id':          // Checks if the user created the record          if ($fieldValue != $GLOBALS['TSFE']->fe_user->user['uid']) {            $conditionFieldAdmin = false;          }          break;        default:          $conditionFieldAdmin = (            strpos($inputAdminConf[$this->extKey . '_Admin'], $fieldValue) === false ?            false :            true          );        break;      }      // Checks if the user has the admin attribute      $conditionSuperAdmin = $this->userIsSuperAdmin();      // Sets the final condition according to the limit      switch ($extensionConfigurationManager->getDateUserRestriction()) {      	case self::NOBODY:          $condition = (            $conditionSuperAdmin ||            $conditionFieldAdmin          );          break;        case self::ALL:          // The condition is applied to all users including super Admin          $condition = $conditionInputDate;          break;        case self::ADMIN_PLUS_USER:          // The condition is applied to admin Plus users          $conditionInputDate = (            $plus ?            $conditionInputDate :            false          );          $condition = (            $conditionSuperAdmin ||            ($conditionFieldAdmin && $conditionInputDate)          );          break;        case self::ALL_EXCLUDING_SUPER_ADMIN:          $condition = $conditionSuperAdmin;          break;        default:          $condition = false;          break;      }  		return $condition;  	}	}  }?>