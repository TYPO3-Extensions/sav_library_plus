<?php/****************************************************************  Copyright notice**  (c) 2011 Laurent Foulloy <yolf.typo3@orange.fr>*  All rights reserved**  This script is part of the TYPO3 project. The TYPO3 project is*  free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  The GNU General Public License can be found at*  http://www.gnu.org/copyleft/gpl.html.**  This script is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  This copyright notice MUST APPEAR in all copies of the script!***************************************************************//** * General configuration manager * * @package SavLibraryPlus * @version $ID:$ */class Tx_SavLibraryPlus_Managers_LibraryConfigurationManager extends Tx_SavLibraryPlus_Managers_AbstractManager{  /**   * The flexforms path   *   * @var array   */  protected static $libraryPath = 'Configuration/Library/';    /**   * The icons path   *   * @var array   */  protected static $iconsPath = 'Resources/Private/Icons/';  /**   * The images path   *   * @var array   */  protected static $imagesPath = 'Resources/Private/Images/';  /**   * The styles path   *   * @var array   */  protected static $stylesPath = 'Resources/Private/Styles/';  /**   * The language path   *   * @var array   */  protected static $languagePath = 'Resources/Private/Language/';        /**   * The library configuration   *   * @var array   */  private $libraryConfiguration;    /**   * The icons directory   *   * @var string   */  private $iconsDirectory;  /**   * The images directory   *   * @var string   */  private $imagesDirectory;    /**   * Initializes the configuration   *   * @param none   *   * @return none   */  public function initialize() {    // Checks if the extension is under maintenance    if ($this->checkIfExtensionIsUnderMaintenance() === true) return false;        // Sets the library configuration    if ($this->setLibraryConfiguration() === false) return false;       // Checks the compatibility    if ($this->checkCompatibility() === false) return false;    // Adds the cascading style sheet to the extension    $this->addCascadingStyleSheetToExtension();    // Injects the form configuration in its manager    $formConfiguration = $this->getFormConfiguration();    if ($formConfiguration === NULL) {    	return false;    }    $this->getController()->getFormConfigurationManager()->injectFormConfiguration($formConfiguration);    return true;  }  /**   * Checks if the extension is under maintenance.   *   * @param none   *   * @return boolean   */  protected function checkIfExtensionIsUnderMaintenance() {    // Checks if a global maintenance is requested    $unserializedConfiguration = unserialize($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf'][Tx_SavLibraryPlus_Controller_AbstractController::LIBRARY_NAME]);    $maintenanceAllowedUsers = explode(',', $unserializedConfiguration['maintenanceAllowedUsers']);    if ($unserializedConfiguration['maintenance']) {      Tx_SavLibraryPlus_Controller_FlashMessages::addError('error.underMaintenance');      if (in_array($GLOBALS['TSFE']->fe_user->user['uid'], $maintenanceAllowedUsers) === false) {        return true;      }    }    // Checks if a maintenance of the extension is requested    $unserializedConfiguration = unserialize($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf'][$this->getController()->getExtensionConfigurationManager()->getExtensionKey()]);    if ($unserializedConfiguration['maintenance']) {      Tx_SavLibraryPlus_Controller_FlashMessages::addError('error.underMaintenance');      if (in_array($GLOBALS['TSFE']->fe_user->user['uid'], $maintenanceAllowedUsers) === false) {        return true;      }    }    return false;  }  /**   *  Sets the library configuration   *   * @param none   *   * @return boolean   */  protected function setLibraryConfiguration () {    $extensionKey = $this->getController()->getExtensionConfigurationManager()->getExtensionKey();    $extensionPrefixId = $this->getController()->getExtensionConfigurationManager()->getExtensionPrefixId();    $fileName = self::$libraryPath . t3lib_div::underscoredToUpperCamelCase(Tx_SavLibraryPlus_Controller_AbstractController::LIBRARY_NAME) . '.xml';    if (file_exists(t3lib_extMgm::extPath($extensionKey) . $fileName) === false) {      Tx_SavLibraryPlus_Controller_FlashMessages::addError('error.unknownConfigurationFile', array());      return false;    } else {      // Sets the configuration      $this->libraryConfiguration = t3lib_div::xml2array($this->getController()->getExtensionConfigurationManager()->getExtensionContentObject()->fileResource('EXT:' . $extensionKey . '/' . $fileName ), 'sav_library_plus_pi');      return true;    }  }  /**   *  Gets the icons directory   *   * @param none   *   * @return boolean   */  public function getIconsDirectory($fileName) {    // The icon directory is taken from the configuration in TS if set,    // else from the Resources/Icons folder in the extension if it exists,    // else from the default Resources/Icons in the library.		if ($this->getController()->getExtensionConfigurationManager()->getExtensionConfigurationItem('iconsDir') &&        file_exists(t3lib_extMgm::siteRelPath($this->getController()->getExtensionConfigurationManager()->getExtensionConfigurationItem('iconsDir')) . $fileName)) {      return $this->getController()->getExtensionConfigurationManager()->getExtensionConfigurationItem('iconsDir');    } elseif (file_exists(t3lib_extMgm::siteRelPath($this->getController()->getExtensionConfigurationManager()->getExtensionKey()) . self::$iconsPath . $fileName)) {      return t3lib_extMgm::siteRelPath($this->getController()->getExtensionConfigurationManager()->getExtensionKey()) . self::$iconsPath;    } else {		  return t3lib_extMgm::siteRelPath(Tx_SavLibraryPlus_Controller_AbstractController::LIBRARY_NAME) . self::$iconsPath;		}  }  /**   *  Sets the images directory   *   * @param none   *   * @return boolean   */  public function getImagesDirectory($fileName) {    // The images directory is taken from the configuration in TS if set,    // else from the Resources/Images folder in the extension if it exists,    // else from the default Resources/Images in the library.		if ($this->getController()->getExtensionConfigurationManager()->getExtensionConfigurationItem('imagesDir') &&        file_exists(t3lib_extMgm::siteRelPath($this->getController()->getExtensionConfigurationManager()->getExtensionConfigurationItem('imagesDir')) . $fileName)) {      $this->imagesDirectory = $this->getController()->getExtensionConfigurationManager()->getExtensionConfigurationItem('imagesDir');    } elseif (file_exists(t3lib_extMgm::siteRelPath($this->getController()->getExtensionConfigurationManager()->getExtensionKey()) . self::$imagesPath) . $fileName) {      $this->imagesDirectory = t3lib_extMgm::siteRelPath($this->getController()->getExtensionConfigurationManager()->getExtensionKey()) . self::$imagesPath;    } else {		  $this->imagesDirectory = t3lib_extMgm::siteRelPath(Tx_SavLibraryPlus_Controller_AbstractController::LIBRARY_NAME) . self::$imagesPath;		}  }  /**   *  Gets the language path   *   * @param none   *   * @return string The language path   */  public function getLanguagePath() {    return self::$languagePath;  }  /**   *  Adds the css file to the extension if any   *  The css file should be extension.css in the extension/res directory   *  where "extension" is the extension key   *   * @param none   *   * @return none   */  protected function addCascadingStyleSheetToExtension() {    $extensionKey = $this->getController()->getExtensionConfigurationManager()->getExtensionKey();		if (file_exists(t3lib_extMgm::extPath($extensionKey) . self::$stylesPath . $extensionKey . '.css')) {      if (!$GLOBALS['TSFE']->additionalHeaderData[$extensionKey]) {        $GLOBALS['TSFE']->additionalHeaderData[$extensionKey] = $this->TAB .          '<link rel="stylesheet" type="text/css" href="' .          t3lib_extMgm::siteRelPath($extensionKey) .          self::$stylesPath . $extensionKey . '.css' . '" />';      }    }  }    /**   * Checks the compatibility between the extension version and the library version.   * Versions are under the format x.y.z. Compatibility is satisfied if x's are the same   *   * @param none   *   * @return boolean   */  protected function checkCompatibility() {    // Checks the compatibility between the extension version and the library version.    // Versions are under the format x.y.z. Compatibility is satisfied if x's are the same    preg_match(      '/^([0-9])\./',      $GLOBALS['TYPO3_CONF_VARS']['EXTCONF'][Tx_SavLibraryPlus_Controller_AbstractController::LIBRARY_NAME]['version'],      $libraryVersion    );    preg_match(      '/^([0-9])\./',      $this->libraryConfiguration['general']['version'],      $extensionVersion    );    if ($libraryVersion[1] != $extensionVersion[1]) {      Tx_SavLibraryPlus_Controller_FlashMessages::addError('error.incorrectVersion');      return false;    } else {      return true;    }  }  /**   * Gets the library configuration.   *   * @param none   *   * @return array   */  public function getLibraryConfiguration() {    return $this->libraryConfiguration;  }  /**   * Gets a field in the general configuration.   *   * @param string $fieldName The field name   *   * @return mixed   */  public function getGeneralConfigurationField($fieldName) {    return $this->libraryConfiguration['general'][$fieldName];  }      /**   * Gets the form configuration.   *   * @param none   *   * @return string or NULL if the form identifier is empty   */  public function getFormConfiguration() {    $formIdentifier = $this->getController()->getExtensionConfigurationManager()->getFormIdentifier();		if (empty($formIdentifier)) {			Tx_SavLibraryPlus_Controller_FlashMessages::addError('fatal.noFormSelectedInFlexform');			return NULL;		}    return $this->libraryConfiguration['forms'][$formIdentifier];  }  /**   * Gets the view identifier.   *   * @param string $viewType - the type of the view   *   * @return integer   */  	public function getViewIdentifier($viewType) {    	$viewsWithCondition = $this->getController()->getFormConfigurationManager()->getViewsWithCondition($viewType);  	if ($viewsWithCondition === NULL) {	    $getViewIdentifierFunction = 'get' . $viewType. 'Identifier';	    $viewIdentifier = $this->getController()->getFormConfigurationManager()->$getViewIdentifierFunction();	    return $viewIdentifier;  	} else {  		foreach ($viewsWithCondition as $viewWithConditionKey => $viewWithCondition) {  			$viewWithConditionConfiguration = $viewWithCondition['config'];  			if (empty($viewWithConditionConfiguration['cutif']) === false){  				// Builds a field configuration manager  				$fieldConfigurationManager = t3lib_div::makeInstance('Tx_SavLibraryPlus_Managers_FieldConfigurationManager');    			$fieldConfigurationManager->injectController($this->getController());    			$fieldConfigurationManager->injectKickstarterFieldConfiguration($viewWithConditionConfiguration);  			    			// Checks the cutif condition    			if ($fieldConfigurationManager->cutIf() === false){    				return $viewWithConditionKey;    			}  			}  		}  		// If no false condition was found, return the default view	    $getViewIdentifierFunction = 'get' . $viewType. 'Identifier';	    $viewIdentifier = $this->getController()->getFormConfigurationManager()->$getViewIdentifierFunction();  	    return $viewIdentifier;  	    }	}    /**   * Gets the view configuration.   *   * @param string $viewIdentifier - the view identifier   *   * @return string   */  public function getViewConfiguration($viewIdentifier) {   		return $this->libraryConfiguration['views'][$viewIdentifier];  }  /**   * Gets the list view template configuration.   *   * @param none   *   * @return string   */  public function getListViewTemplateConfiguration() {    $listViewIdentifier = $this->getController()->getFormConfigurationManager()->getListViewIdentifier();    return $this->libraryConfiguration['templates'][$listViewIdentifier];  }  /**   * Gets the form view template configuration.   *   * @param none   *   * @return string   */  public function getFormViewTemplateConfiguration() {    $formViewIdentifier = $this->getController()->getFormConfigurationManager()->getFormViewIdentifier();    return $this->libraryConfiguration['templates'][$formViewIdentifier];  }    /**   * Gets the query configuration.   *   * @param none   *   * @return string   */  public function getQueryConfiguration() {    $queryIdentifier = $this->getController()->getFormConfigurationManager()->getQueryIdentifier();    return $this->libraryConfiguration['queries'][$queryIdentifier];  }  /**   * Gets the external TCA configuration.   *   * @param none   *   * @return string   */  public function getExternalTcaConfiguration() {    return $this->libraryConfiguration['TCA'];  }        /**   * Searchs for a field configuration in a view configuration   *   * @param $viewConfiguration array The view configuration   * @param $fieldKey string the key to search   *   * @return mixed The configuration or false if the key is not found   */  public static function searchFieldConfiguration(&$viewConfiguration, $fieldKey) {    foreach ($viewConfiguration as $itemKey => $item) {      if ($itemKey == $fieldKey) {        return $item['config'];      } elseif (isset($item['config']['subform'])) {        $fieldConfiguration = self::searchFieldConfiguration($item['config']['subform'], $fieldKey);        if($fieldConfiguration != false) {          return $fieldConfiguration;        }      } elseif (isset($item['fields'])) {        $fieldConfiguration = self::searchFieldConfiguration($item['fields'], $fieldKey);        if($fieldConfiguration != false) {          return $fieldConfiguration;        }      }    }    return false;  }  /**   * Searchs for the basic field configuration (fieldType, tableName, fieldName) in the library configuration views   *   * @param $fieldKey string the key to search   * @param $configuration array The configuration in which the search is performed   *   * @return mixed The configuration or false if the key is not found   */  public function searchBasicFieldConfiguration($fieldKey, $configuration = NULL) {  	if ($configuration === NULL) {  		$configuration = $this->libraryConfiguration['views'];  	}    foreach ($configuration as $itemKey => $item) {      if ($itemKey == $fieldKey) {      	$basicFieldConfiguration = array(      		'fieldType' => $item['config']['fieldType'],      	  'tableName' => $item['config']['tableName'],      		'fieldName' => $item['config']['fieldName'],      	      	);      	if ($item['config']['fieldType'] === 'ShowOnly') {      		$basicFieldConfiguration = array_merge($basicFieldConfiguration, array('renderType' => $item['config']['renderType']));      	}        return $basicFieldConfiguration;      } elseif (isset($item['config']['subform'])) {        $basicFieldConfiguration = $this->searchBasicFieldConfiguration($fieldKey, $item['config']['subform']);        if($basicFieldConfiguration != false) {          return $basicFieldConfiguration;        }      } elseif (isset($item['fields'])) {        $basicFieldConfiguration = $this->searchBasicFieldConfiguration($fieldKey, $item['fields']);        if($basicFieldConfiguration != false) {          return $basicFieldConfiguration;        }      } elseif(is_int($itemKey)) {        $basicFieldConfiguration = $this->searchBasicFieldConfiguration($fieldKey, $item);        if($basicFieldConfiguration != false) {          return $basicFieldConfiguration;        }      	      }    }    return false;  }    /**   * Gets the default date format from the library TypoScript configuration if any.   *   * @param none   *   * @return string   */  public static function getDefaultDateFormat() {  	$libraryPluginName = 'tx_' . str_replace('_', '', Tx_SavLibraryPlus_Controller_AbstractController::LIBRARY_NAME) . '.';  	$format = $GLOBALS['TSFE']->tmpl->setup['plugin.'][$libraryPluginName]['format.'];  	if (is_array($format) && empty($format['date']) === false) {  		return $format['date'];  	} else {  		return NULL;  	}  }     /**   * Gets the default dateTime format from the library TypoScript configuration if any.   *   * @param none   *   * @return string   */  public static function getDefaultDateTimeFormat() {  	$libraryPluginName = 'tx_' . str_replace('_', '', Tx_SavLibraryPlus_Controller_AbstractController::LIBRARY_NAME) . '.';  	$format = $GLOBALS['TSFE']->tmpl->setup['plugin.'][$libraryPluginName]['format.'];  	if (is_array($format) && empty($format['dateTime']) === false) {  		return $format['dateTime'];  	} else {  		return NULL;  	}  }   }?>