<?php/****************************************************************  Copyright notice**  (c) 2011 Laurent Foulloy <yolf.typo3@orange.fr>*  All rights reserved**  This script is part of the TYPO3 project. The TYPO3 project is*  free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  The GNU General Public License can be found at*  http://www.gnu.org/copyleft/gpl.html.**  This script is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  This copyright notice MUST APPEAR in all copies of the script!***************************************************************//** * Page Typoscript configuration manager *  * @package SavLibraryPlus * @version $ID:$ */class Tx_SavLibraryPlus_Managers_PageTypoScriptConfigurationManager  extends Tx_SavLibraryPlus_Managers_AbstractManager {		/**	 * Gets the page TypoScript configuration.	 *	 * @param  string $type	 *	 * @return array or null	 */	protected function getTypoScriptConfiguration($type) {				// Gets the page TypoScript configuration    $pageTypoScriptConfiguration = $GLOBALS['TSFE']->getPagesTSconfig();    if (is_array($pageTypoScriptConfiguration) === false) {    	return NULL;    }       // Gets the plugin TypoScript configuration    $extensionConfigurationManager = $this->getController()->getExtensionConfigurationManager();    $pluginTypoScriptConfiguration = $pageTypoScriptConfiguration[$extensionConfigurationManager->getTSconfigPluginName() . '.'];      if (is_array($pluginTypoScriptConfiguration) === false) {    	return NULL;    }     // Gets the plugin TypoScript configuration    $formTypoScriptConfiguration = $pluginTypoScriptConfiguration[$this->getController()->getFormConfigurationManager()->getFormTitle() . '.'];     if (is_array($formTypoScriptConfiguration) === false) {    	return NULL;    }            // Gets the TypoScript configuration        $typoScriptConfiguration = $formTypoScriptConfiguration[t3lib_div::lcfirst($type) . '.'];    if (is_array($typoScriptConfiguration) === false) {    	return NULL;    }       return $typoScriptConfiguration;	}	  /**   * Sets the view configuration files from the page TypoScript configuration   *   * @param none   *   * @return none   */  public function setViewConfigurationFilesFromPageTypoScriptConfiguration() {  	  	// Gets the view type  	$viewer = $this->getController()->getViewer();    if ($viewer === NULL) {			return;		}  	$viewType = $viewer->getViewType();  		// Gets the view page TypoScript configuration  		$viewTypoScriptConfiguration = $this->getTypoScriptConfiguration($viewType);		if ($viewTypoScriptConfiguration === NULL) {			return;		}		    // Processes the view configuration files    $viewConfigurationFiles = $viewTypoScriptConfiguration['configuration.'];    if (is_array($viewConfigurationFiles)) {    	foreach($viewConfigurationFiles as $viewConfigurationFileKey => $viewConfigurationFile) {    		    		switch($viewConfigurationFileKey) {    			case 'templateFile':    			case 'partialRootPath':    			case 'layoutRootPath':    				$setMethod = 'set' . ucfirst($viewConfigurationFileKey);				    				if (method_exists($viewer, $setMethod) === true) {    					$viewer->$setMethod($viewConfigurationFile);    				} else {							Tx_SavLibraryPlus_Controller_FlashMessages::addError('error.unknownSetMethodForPageTypoScriptConfiguration', array($setMethod, $viewType));							    					    				}    				break;    			default:						Tx_SavLibraryPlus_Controller_FlashMessages::addError('error.unknownPageTypoScriptConfiguration', array($viewConfigurationFileKey, $viewType));    				break;    		}    	}    }  }    /**   * Gets the view configuration field from the page TypoScript configuration   *   * @param string $fieldName   *   * @return array   */  public function getViewConfigurationFieldFromPageTypoScriptConfiguration($fieldName) {	  	// Gets the view type  	$viewer = $this->getController()->getViewer();  	if ($viewer === NULL) {			return NULL;		}  	  	$viewType = $viewer->getViewType();  		// Gets the view page TypoScript configuration  		$viewTypoScriptConfiguration = $this->getTypoScriptConfiguration($viewType);		if ($viewTypoScriptConfiguration === NULL) {			return NULL;		}		    // Processes the view configuration fields    $viewConfigurationFields = $viewTypoScriptConfiguration['fields.'];       $fieldName = $fieldName . '.';    if (is_array($viewConfigurationFields[$fieldName ])) {    	$fieldAttributes = array();    	foreach($viewConfigurationFields[$fieldName] as $viewConfigurationFieldKey => $viewConfigurationField) {    		$fieldAttributes[strtolower($viewConfigurationFieldKey)] = $viewConfigurationField;    	}    	return $fieldAttributes;    } else {    	return NULL;    }  }   }?>