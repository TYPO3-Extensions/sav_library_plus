<?phpnamespace SAV\SavLibraryPlus\Controller;use \TYPO3\CMS\Core\Utility\GeneralUtility;/****************************************************************  Copyright notice**  (c) 2015 Laurent Foulloy <yolf.typo3@orange.fr>*  All rights reserved**  This script is part of the TYPO3 project. The TYPO3 project is*  free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  The GNU General Public License can be found at*  http://www.gnu.org/copyleft/gpl.html.**  This script is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  This copyright notice MUST APPEAR in all copies of the script!***************************************************************//** * Controller * * @package SavLibraryPlus * @version $ID:$ */class Controller extends AbstractController {   	/**	 * Common code for change page in subform actions	 *	 * @param none	 *	 * @none	 */  protected function changePageInSubform() {    $subformFieldKey = \SAV\SavLibraryPlus\Managers\UriManager::getSubformFieldKey();    \SAV\SavLibraryPlus\Managers\SessionManager::setSubformFieldFromSession($subformFieldKey, 'pageInSubform', \SAV\SavLibraryPlus\Managers\UriManager::getPageInSubform());  } 	/**	 * Renders change page in subform action	 *	 * @param none	 *	 * @return string	 */  protected function changePageInSubformAction() {    $this->changePageInSubform();    return $this->renderForm('single');  } 	/**	 * Renders change page in subform action	 *	 * @param none	 *	 * @return string	 */  protected function changePageInSubformInEditModeAction() {    $this->changePageInSubform();    return $this->renderForm('edit');  } 	/**	 * Renders the Close action	 *	 * @param none	 *	 * @return string	 */  protected function closeAction() {    \SAV\SavLibraryPlus\Managers\SessionManager::clearSubformFromSession();    return $this->renderForm('list');  }   	/**	 * Renders the Close in edit mode action	 *	 * @param none	 *	 * @return string	 */  protected function closeInEditModeAction() {    \SAV\SavLibraryPlus\Managers\SessionManager::clearSubformFromSession();      return $this->renderForm('listInEditMode');  } 	/**	 * Renders the Delete action	 *	 * @param none	 *	 * @return string	 */  protected function deleteAction() {    $querierClassName = 'SAV\\SavLibraryPlus\\Queriers\\DeleteQuerier';    $this->querier = GeneralUtility::makeInstance($querierClassName);    $this->querier->injectController($this);    $this->querier->injectQueryConfiguration();    $this->querier->processQuery();    return $this->renderForm('listInEditMode');  } 	/**	 * Renders the Delete action	 *	 * @param none	 *	 * @return string	 */  protected function deleteInSubformAction() {    $querierClassName = 'SAV\\SavLibraryPlus\\Queriers\\DeleteInSubformQuerier';    $this->querier = GeneralUtility::makeInstance($querierClassName);    $this->querier->injectController($this);    $this->querier->injectQueryConfiguration();    $this->querier->processQuery();    // Renders the form in edit mode    return $this->renderForm('edit');  }     	/**	 * Renders the down action	 *	 * @param none	 *	 * @return string	 */  protected function downInSubformAction() {    $querierClassName = 'SAV\\SavLibraryPlus\\Queriers\\DownInSubformQuerier';    $this->querier = GeneralUtility::makeInstance($querierClassName);    $this->querier->injectController($this);    $this->querier->injectQueryConfiguration();    $this->querier->processQuery();    // Renders the form in edit mode    return $this->renderForm('edit');  }   	/**	 * Renders the Edit action	 *	 * @param none	 *	 * @return string	 */  protected function editAction() {    \SAV\SavLibraryPlus\Managers\SessionManager::clearSubformFromSession();    return $this->renderForm('edit');  } 	/**	 * Renders the Export action	 *	 * @param none	 *	 * @return string	 */  protected function exportAction() {    return $this->renderForm('export');  }   	/**	 * Renders the Export Submit action	 *	 * @param none	 *	 * @return string	 */  protected function exportSubmitAction() {  	// Sets the post variables  	    $uriManager = $this->getUriManager();    $uriManager->setPostVariables();  			// Gets the form action		$formAction = $uriManager->getFormActionFromPostVariables();		if (isset($formAction['exportLoadConfiguration'])) {    	return $this->renderForm('exportLoadConfiguration');									} elseif (isset($formAction['exportSaveConfiguration'])) {			return $this->renderForm('exportSaveConfiguration');		} elseif (isset($formAction['exportDeleteConfiguration'])) {			return $this->renderForm('exportDeleteConfiguration');		} elseif (isset($formAction['exportToggleDisplay'])) {			return $this->renderForm('exportToggleDisplay');		} elseif (isset($formAction['exportExecute'])) {			return $this->renderForm('exportExecute');		} elseif (isset($formAction['exportQueryMode'])) {			return $this->renderForm('exportQueryMode');		} else {    	return $this->renderForm('export');		}  }     	/**	 * Common code for the first page actions	 *	 * @param none	 *	 * @none	 */  protected function firstPage() {    $compressedParameters = \SAV\SavLibraryPlus\Managers\UriManager::getCompressedParameters();    $compressedParameters = self::changeCompressedParameters($compressedParameters, 'page', 0 );    \SAV\SavLibraryPlus\Managers\UriManager::setCompressedParameters($compressedParameters);  } 	/**	 * Renders the first page action	 *	 * @param none	 *	 * @return string	 */  protected function firstPageAction() {    $this->firstPage();    return $this->renderForm('list');  } 	/**	 * Renders the first page in edit mode action	 *	 * @param none	 *	 * @return string	 */  protected function firstPageInEditModeAction() {    $this->firstPage();    return $this->renderForm('listInEditMode');  }   	/**	 * Common code for the first page in subform actions	 *	 * @param none	 *	 * @none	 */  protected function firstPageInSubform() {    $subformFieldKey = \SAV\SavLibraryPlus\Managers\UriManager::getSubformFieldKey();    \SAV\SavLibraryPlus\Managers\SessionManager::setSubformFieldFromSession($subformFieldKey, 'pageInSubform', 0);  } 	/**	 * Renders the first page in subform action	 *	 * @param none	 *	 * @return string	 */  protected function firstPageInSubformAction() {    $this->firstPageInSubform();    return $this->renderForm('single');  } 	/**	 * Renders the first page in subform action	 *	 * @param none	 *	 * @return string	 */  protected function firstPageInSubformInEditModeAction() {    $this->firstPageInSubform();    return $this->renderForm('edit');  } 	/**	 * Renders the form action	 *	 * @param none	 *	 * @return string	 */  protected function formAction() {    return $this->renderForm('form');  } 	/**	 * Renders the form admin action	 *	 * @param none	 *	 * @return string	 */  protected function formAdminAction() {    return $this->renderForm('formAdmin');  }     	/**	 * Common code for the last page actions	 *	 * @param none	 *	 * @none	 */  protected function lastPage() {    // Creates a querier to get the total rows count    $querier = GeneralUtility::makeInstance('SAV\\SavLibraryPlus\\Queriers\\ListSelectQuerier');    $querier->injectController($this);    $querier->injectQueryConfiguration();    $querier->processTotalRowsCountQuery();    $lastPage = floor(($querier->getTotalRowsCount() - 1) / $this->getExtensionConfigurationManager()->getMaxItems());    $compressedParameters = \SAV\SavLibraryPlus\Managers\UriManager::getCompressedParameters();    $compressedParameters = self::changeCompressedParameters($compressedParameters, 'page', $lastPage );    \SAV\SavLibraryPlus\Managers\UriManager::setCompressedParameters($compressedParameters);  }   	/**	 * Renders the last page action	 *	 * @param none	 *	 * @return string	 */  protected function lastPageAction() {    $this->lastPage();    return $this->renderForm('list');  } 	/**	 * Renders the last page in edit mode action	 *	 * @param none	 *	 * @return string	 */  protected function lastPageInEditModeAction() {    $this->lastPage();    return $this->renderForm('listInEditMode');  } 	/**	 * Common code for the last page in subform actions	 *	 * @param none	 *	 * @none	 */  protected function lastPageInSubform($view) {    // Gets the subform field key    $subformFieldKey = \SAV\SavLibraryPlus\Managers\UriManager::getSubformFieldKey();    // Gets the view identifier    $viewIdentifier =  $this->getLibraryConfigurationManager()->getViewIdentifier($view);      // Gets the view configuration    $libraryViewConfiguration =  $this->getLibraryConfigurationManager()->getViewConfiguration($viewIdentifier);        // Gets the kickstarter configuration for the subform field key    $kickstarterFieldConfiguration = $this->getLibraryConfigurationManager()->searchFieldConfiguration($libraryViewConfiguration, $subformFieldKey);    // Gets the field configuration    $fieldConfigurationManager = GeneralUtility::makeInstance('SAV\\SavLibraryPlus\\Managers\\FieldConfigurationManager');    $fieldConfigurationManager->injectController($this);    $fieldConfigurationManager->injectKickstarterFieldConfiguration($kickstarterFieldConfiguration);    $fieldConfiguration = $fieldConfigurationManager->getFieldConfiguration();    // Adds the uidLocal and the page in the subform    $fieldConfiguration['uidLocal'] = \SAV\SavLibraryPlus\Managers\UriManager::getSubformUidLocal();    // Builds the querier for the total rows count    $querierClassName = 'SAV\\SavLibraryPlus\\Queriers\\ForeignTableSelectQuerier';    $querier = GeneralUtility::makeInstance($querierClassName);    $querier->injectController($this);    $querier-> buildQueryConfigurationForTrueManyToManyRelation($fieldConfiguration);    $querier->injectQueryConfiguration();    $querier->processTotalRowsCountQuery();    // Changes the page in subform    $lastPage = floor(($querier->getTotalRowsCount() - 1) / $fieldConfiguration['maxsubformitems']);    \SAV\SavLibraryPlus\Managers\SessionManager::setSubformFieldFromSession($subformFieldKey, 'pageInSubform', $lastPage);  } 	/**	 * Renders the last page in subform action	 *	 * @param none	 *	 * @return string	 */  protected function lastPageInSubformAction() {    $this->lastPageInSubform('singleView');    return $this->renderForm('single');  } 	/**	 * Renders the last page in subform in edit mode action	 *	 * @param none	 *	 * @return string	 */  protected function lastPageInSubformInEditModeAction() {    $this->lastPageInSubform('editView');    return $this->renderForm('edit');  }   	/**	 * Renders the List action	 *	 * @param none	 *	 * @return string	 */  protected function listAction() {    return $this->renderForm('list');  } 	/**	 * Renders the List action in edit mode	 *	 * @param none	 *	 * @return string	 */  protected function listInEditModeAction() {    return $this->renderForm('listInEditMode');  } 	/**	 * Common code for the next page actions	 *	 * @param none	 *	 * @return none	 */  protected function nextPage() {    $compressedParameters = \SAV\SavLibraryPlus\Managers\UriManager::getCompressedParameters();    $compressedParameters = self::changeCompressedParameters($compressedParameters, 'page', \SAV\SavLibraryPlus\Managers\UriManager::getPage() + 1 );    \SAV\SavLibraryPlus\Managers\UriManager::setCompressedParameters($compressedParameters);  } 	/**	 * Renders the next page action	 *	 * @param none	 *	 * @return string	 */  protected function nextPageAction() {    $this->nextPage();    return $this->renderForm('list');  } 	/**	 * Renders the next page action in edit mode	 *	 * @param none	 *	 * @return string	 */  protected function nextPageInEditModeAction() {    $this->nextPage();    return $this->renderForm('listInEditMode');  }   	/**	 * Common code for the next page in subform actions	 *	 * @param none	 *	 * @return none	 */  protected function nextPageInSubform() {    $subformFieldKey = \SAV\SavLibraryPlus\Managers\UriManager::getSubformFieldKey();    $pageInSubform = \SAV\SavLibraryPlus\Managers\SessionManager::getSubformFieldFromSession($subformFieldKey, 'pageInSubform');    \SAV\SavLibraryPlus\Managers\SessionManager::setSubformFieldFromSession($subformFieldKey, 'pageInSubform', $pageInSubform + 1);  } 	/**	 * Renders the next page in subform action	 *	 * @param none	 *	 * @return string	 */  protected function nextPageinSubformAction() {    $this->nextPageInSubform();    return $this->renderForm('single');  } 	/**	 * Renders the next page in subform in edit mode action	 *	 * @param none	 *	 * @return string	 */  protected function nextPageinSubformInEditModeAction() {    $this->nextPageInSubform();    return $this->renderForm('edit');  }   	/**	 * Renders the new action	 *	 * @param none	 *	 * @return string	 */  protected function newAction() {    return $this->renderForm('new');  } 	/**	 * Renders the new action	 *	 * @param none	 *	 * @return string	 */  protected function newInSubformAction() {    return $this->renderForm('newInSubform');  } 	/**	 * Renders the noDisplay action	 *	 * @param none	 *	 * @return string	 */  protected function noDisplayAction() {    return '';  }   	/**	 * Common code for the previous page actions	 *	 * @param none	 *	 * @return none	 */  protected function previousPage() {    $compressedParameters = \SAV\SavLibraryPlus\Managers\UriManager::getCompressedParameters();    $compressedParameters = self::changeCompressedParameters($compressedParameters, 'page', \SAV\SavLibraryPlus\Managers\UriManager::getPage() - 1 );    \SAV\SavLibraryPlus\Managers\UriManager::setCompressedParameters($compressedParameters);  }   	/**	 * Renders the previous page action	 *	 * @param none	 *	 * @return string	 */  protected function previousPageAction() {    $this->previousPage();    return $this->renderForm('list');  } 	/**	 * Renders the previous page action in edit mode	 *	 * @param none	 *	 * @return string	 */  protected function previousPageInEditModeAction() {    $this->previousPage();    return $this->renderForm('listInEditMode');  }   	/**	 * Common code for the previous page in subform actions	 *	 * @param none	 *	 * @return string	 */  protected function previousPageInSubform() {    $subformFieldKey = \SAV\SavLibraryPlus\Managers\UriManager::getSubformFieldKey();    $pageInSubform =\SAV\SavLibraryPlus\Managers\SessionManager::getSubformFieldFromSession($subformFieldKey, 'pageInSubform');    \SAV\SavLibraryPlus\Managers\SessionManager::setSubformFieldFromSession($subformFieldKey, 'pageInSubform', $pageInSubform - 1);  } 	/**	 * Renders the previous page in subform action	 *	 * @param none	 *	 * @return string	 */  protected function previousPageInSubformAction() {    $this->previousPageInSubform();    return $this->renderForm('single');  } 	/**	 * Renders the previous page in subform in edit mode action	 *	 * @param none	 *	 * @return string	 */  protected function previousPageInSubformInEditModeAction() {    $this->previousPageInSubform();    return $this->renderForm('edit');  }   	/**	 * Renders the printInList action	 *	 * @param none	 *	 * @return string	 */  protected function printInListAction() {    return $this->renderForm('printInList');  }   	/**	 * Renders the printInSingle action	 *	 * @param none	 *	 * @return string	 */  protected function printInSingleAction() {    return $this->renderForm('printInSingle');  }     	/**	 * Renders the save action	 *	 * @param none	 *	 * @return string	 */  protected function saveAction() {   	// Sets the post variables  	    $uriManager = $this->getUriManager();    $uriManager->setPostVariables();      $querierClassName = 'SAV\\SavLibraryPlus\\Queriers\\UpdateQuerier';    $this->querier = GeneralUtility::makeInstance($querierClassName);    $this->querier->injectController($this);    $this->querier->injectQueryConfiguration();    // Processes the query and renders the edit form in case of errors    if ($this->querier->processQuery() === FALSE) {			return $this->renderForm('edit');    }        // Gets the form action    $formAction = $uriManager->getFormActionFromPostVariables();    if (isset($formAction['saveAndShow'])) {      return $this->renderForm('single');    } elseif (isset($formAction['saveAndClose'])) {      return $this->renderForm('listInEditMode');    } elseif (isset($formAction['saveAndNew'])) {      return $this->renderForm('new');          } elseif (isset($formAction['saveAndNewInSubform'])) {    	// Changes the form action    	$compressedParameters = \SAV\SavLibraryPlus\Managers\UriManager::getCompressedParameters();    	$compressedParameters = self::changeCompressedParameters($compressedParameters, 'formAction', 'newInSubform');    	    	// Gets the compressed string    	$compressedString = key($formAction['saveAndNewInSubform']);    	$uncompressedParameters = self::uncompressParameters($compressedString);    	// Changes the parameters    	foreach ($uncompressedParameters as $parameterKey => $parameter) {    		$compressedParameters = self::changeCompressedParameters($compressedParameters, $parameterKey, $parameter);    	}    	\SAV\SavLibraryPlus\Managers\UriManager::setCompressedParameters($compressedParameters);    	    	      return $this->renderForm('newInSubform');          } else {      return $this->renderForm('edit');    }  } 	/**	 * Renders the save form action	 *	 * @param none	 *	 * @return string	 */  protected function saveFormAction() {  	// Sets the post variables    $uriManager = $this->getUriManager();    $uriManager->setPostVariables();      $querierClassName = 'SAV\\SavLibraryPlus\\Queriers\\FormUpdateQuerier';    $this->querier = GeneralUtility::makeInstance($querierClassName);    $this->querier->injectController($this);    $this->querier->injectQueryConfiguration();    $this->querier->processQuery();   	return $this->renderForm('form');  }   	/**	 * Renders the save form action	 *	 * @param none	 *	 * @return string	 */  protected function saveFormAdminAction() {  	// Sets the post variables    $uriManager = $this->getUriManager();    $uriManager->setPostVariables();      $querierClassName = 'SAV\\SavLibraryPlus\\Queriers\\FormAdminUpdateQuerier';    $this->querier = GeneralUtility::makeInstance($querierClassName);    $this->querier->injectController($this);    $this->querier->injectQueryConfiguration();    $this->querier->processQuery();   	return $this->renderForm('formAdmin');  }     	/**	 * Renders the single action	 *	 * @param none	 *	 * @return string	 */  protected function singleAction() {    \SAV\SavLibraryPlus\Managers\SessionManager::clearSubformFromSession();    return $this->renderForm('single');  } 	/**	 * Renders the up action	 *	 * @param none	 *	 * @return string	 */  protected function upInSubformAction() {    $querierClassName = 'SAV\\SavLibraryPlus\\Queriers\\UpInSubformQuerier';    $this->querier = GeneralUtility::makeInstance($querierClassName);    $this->querier->injectController($this);    $this->querier->injectQueryConfiguration();    $this->querier->processQuery();        // Renders the form in edit mode    return $this->renderForm('edit');  }  }?>